@misc{feng2023efficiency,
      title={Efficiency Matters: Speeding Up Automated Testing with GUI Rendering Inference}, 
      author={Sidong Feng and Mulong Xie and Chunyang Chen},
      year={2023},
      eprint={2212.05203},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}


@inproceedings{10.1109/ICSE48619.2023.00167,
author = {Yandrapally, Rahulkrishna and Sinha, Saurabh and Tzoref-Brill, Rachel and Mesbah, Ali},
title = {Carving UI Tests to Generate API Tests and API Specification},
year = {2023},
isbn = {9781665457019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE48619.2023.00167},
doi = {10.1109/ICSE48619.2023.00167},
abstract = {Modern web applications make extensive use of API calls to update the UI state in response to user events or server-side changes. For such applications, API-level testing can play an important role, in-between unit-level testing and UI-level (or end-to-end) testing. Existing API testing tools require API specifications (e.g., OpenAPI), which often may not be available or, when available, be inconsistent with the API implementation, thus limiting the applicability of automated API testing to web applications. In this paper, we present an approach that leverages UI testing to enable API-level testing for web applications. Our technique navigates the web application under test and automatically generates an API-level test suite, along with an OpenAPI specification that describes the application's server-side APIs (for REST-based web applications). A key element of our solution is a dynamic approach for inferring API endpoints with path parameters via UI navigation and directed API probing. We evaluated the technique for its accuracy in inferring API specifications and the effectiveness of the "carved" API tests. Our results on seven open-source web applications show that the technique achieves 98\% precision and 56\% recall in inferring endpoints. The carved API tests, when added to test suites generated by two automated REST API testing tools, increase statement coverage by 52\% and 29\% and branch coverage by 99\% and 75\%, on average. The main benefits of our technique are: (1) it enables API-level testing of web applications in cases where existing API testing tools are inapplicable and (2) it creates API-level test suites that cover server-side code efficiently while exercising APIs as they would be invoked from an application's web UI, and that can augment existing API test suites.},
booktitle = {Proceedings of the 45th International Conference on Software Engineering},
pages = {1971–1982},
numpages = {12},
keywords = {test generation, end-to-end testing, API testing, UI testing, web application testing, test carving, API specification inference},
location = {Melbourne, Victoria, Australia},
series = {ICSE '23}
}



@inproceedings{10.1145/3510003.3510105,
author = {de Souza Santos, Ronnie E. and Ralph, Paul},
title = {A Grounded Theory of Coordination in Remote-First and Hybrid Software Teams},
year = {2022},
isbn = {9781450392211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510003.3510105},
doi = {10.1145/3510003.3510105},
abstract = {While the long-term effects of the COVID-19 pandemic on software professionals and organizations are difficult to predict, it seems likely that working from home, remote-first teams, distributed teams, and hybrid (part-remote/part-office) teams will be more common. It is therefore important to investigate the challenges that software teams and organizations face with new remote and hybrid work. Consequently, this paper reports a year-long, participant-observation, constructivist grounded theory study investigating the impact of working from home on software development. This study resulted in a theory of software team coordination. Briefly, shifting from in-office to at-home work fundamentally altered coordination within software teams. While group cohesion and more effective communication appear protective, coordination is undermined by distrust, parenting and communication bricolage. Poor coordination leads to numerous problems including misunderstandings, help requests, lower job satisfaction among team members, and more ill-defined tasks. These problems, in turn, reduce overall project success and prompt professionals to alter their software development processes (in this case, from Scrum to Kanban). Our findings suggest that software organizations with many remote employees can improve performance by encouraging greater engagement within teams and supporting employees with family and childcare responsibilities.},
booktitle = {Proceedings of the 44th International Conference on Software Engineering},
pages = {25–35},
numpages = {11},
keywords = {agile methods, work-from-home, coordination, grounded theory, remote work, software development, COVID-19},
location = {Pittsburgh, Pennsylvania},
series = {ICSE '22}
}

@INPROCEEDINGS{9793896,

  author={Zhang, Chen and Chen, Bihuan and Peng, Xin and Zhao, Wenyun},

  booktitle={2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE)}, 

  title={Buildsheriff: Change-Aware Test Failure Triage for Continuous Integration Builds}, 

  year={2022},

  volume={},

  number={},

  pages={312-324},

  doi={10.1145/3510003.3510132}
}


@inproceedings{10.1145/2025113.2025179,
author = {Fraser, Gordon and Arcuri, Andrea},
title = {EvoSuite: Automatic Test Suite Generation for Object-Oriented Software},
year = {2011},
isbn = {9781450304436},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2025113.2025179},
doi = {10.1145/2025113.2025179},
abstract = {To find defects in software, one needs test cases that execute the software systematically, and oracles that assess the correctness of the observed behavior when running these test cases. This paper presents EvoSuite, a tool that automatically generates test cases with assertions for classes written in Java code. To achieve this, EvoSuite applies a novel hybrid approach that generates and optimizes whole test suites towards satisfying a coverage criterion. For the produced test suites, EvoSuite suggests possible oracles by adding small and effective sets of assertions that concisely summarize the current behavior; these assertions allow the developer to detect deviations from expected behavior, and to capture the current behavior in order to protect against future defects breaking this behavior.},
booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
pages = {416–419},
numpages = {4},
keywords = {assertion generation, search based soft- ware testing, test case generation},
location = {Szeged, Hungary},
series = {ESEC/FSE '11}
}


@misc{yandrapally2023carving,
      title={Carving UI Tests to Generate API Tests and API Specification}, 
      author={Rahulkrishna Yandrapally and Saurabh Sinha and Rachel Tzoref-Brill and Ali Mesbah},
      year={2023},
      eprint={2305.14692},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@INPROCEEDINGS{9402052,

  author={Nusrat, Fariha and Hassan, Foyzul and Zhong, Hao and Wang, Xiaoyin},

  booktitle={2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)}, 

  title={How Developers Optimize Virtual Reality Applications: A Study of Optimization Commits in Open Source Unity Projects}, 

  year={2021},

  volume={},

  number={},

  pages={473-485},

  doi={10.1109/ICSE43902.2021.00052}
}


@INPROCEEDINGS{10172611,
  author={Ran, Dezhi and Wang, Hao and Wang, Wenyu and Xie, Tao},
  booktitle={2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)}, 
  title={Badge: Prioritizing UI Events with Hierarchical Multi-Armed Bandits for Automated UI Testing}, 
  year={2023},
  volume={},
  number={},
  pages={894-905},
  doi={10.1109/ICSE48619.2023.00083}}

@INPROCEEDINGS{10190433,

  author={Afonso, João and Campos, José},

  booktitle={2023 IEEE/ACM International Workshop on Search-Based and Fuzz Testing (SBFT)}, 

  title={Automatic Generation of Smell-free Unit Tests}, 

  year={2023},

  volume={},

  number={},

  pages={9-16},

  doi={10.1109/SBFT59156.2023.00013}}
